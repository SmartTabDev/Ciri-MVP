"""add gmail_box_credentials to companies

Revision ID: 171e4584d011
Revises: 019
Create Date: 2025-07-23 12:29:14.670071

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '171e4584d011'
down_revision = '019'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_leads_id'), table_name='leads')
    op.drop_table('leads')
    op.drop_index(op.f('ix_ai_agent_settings_id'), table_name='ai_agent_settings')
    op.drop_table('ai_agent_settings')
    op.drop_index(op.f('ix_training_diagrams_id'), table_name='training_diagrams')
    op.drop_index(op.f('ix_training_diagrams_user_id'), table_name='training_diagrams')
    op.drop_table('training_diagrams')
    op.add_column('companies', sa.Column('gmail_box_credentials', sa.JSON(), nullable=True))
    op.alter_column('companies', 'business_email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index(op.f('ix_companies_name'), table_name='companies')
    op.create_unique_constraint(None, 'companies', ['business_email'])
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.drop_constraint(None, 'companies', type_='unique')
    op.create_index(op.f('ix_companies_name'), 'companies', ['name'], unique=False)
    op.alter_column('companies', 'business_email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('companies', 'gmail_box_credentials')
    op.create_table('training_diagrams',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('nodes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('edges', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('training_diagrams_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('training_diagrams_pkey'))
    )
    op.create_index(op.f('ix_training_diagrams_user_id'), 'training_diagrams', ['user_id'], unique=False)
    op.create_index(op.f('ix_training_diagrams_id'), 'training_diagrams', ['id'], unique=False)
    op.create_table('ai_agent_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('voice_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('dialect', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('goal', sa.VARCHAR(), server_default=sa.text("'Book appointments and collect customer emails'::character varying"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('fk_ai_agent_settings_company_id')),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_agent_settings_pkey'))
    )
    op.create_index(op.f('ix_ai_agent_settings_id'), 'ai_agent_settings', ['id'], unique=False)
    op.create_table('leads',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('follow_up_last_sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('email_context', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('leads_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('leads_pkey'))
    )
    op.create_index(op.f('ix_leads_id'), 'leads', ['id'], unique=False)
    # ### end Alembic commands ###
